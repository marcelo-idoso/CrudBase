<?php

namespace DoctrineORMModule\Proxy\__CG__\Application\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Categoria extends \Application\Entity\Categoria implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'Application\\Entity\\Categoria' . "\0" . 'nome', '' . "\0" . 'Application\\Entity\\Categoria' . "\0" . 'ico', '' . "\0" . 'Application\\Entity\\Categoria' . "\0" . 'descr', '' . "\0" . 'Application\\Entity\\Categoria' . "\0" . 'link', '' . "\0" . 'Application\\Entity\\Categoria' . "\0" . 'exibir', '' . "\0" . 'Application\\Entity\\Categoria' . "\0" . 'orderexibir', 'id', 'date_create', 'date_update'];
        }

        return ['__isInitialized__', '' . "\0" . 'Application\\Entity\\Categoria' . "\0" . 'nome', '' . "\0" . 'Application\\Entity\\Categoria' . "\0" . 'ico', '' . "\0" . 'Application\\Entity\\Categoria' . "\0" . 'descr', '' . "\0" . 'Application\\Entity\\Categoria' . "\0" . 'link', '' . "\0" . 'Application\\Entity\\Categoria' . "\0" . 'exibir', '' . "\0" . 'Application\\Entity\\Categoria' . "\0" . 'orderexibir', 'id', 'date_create', 'date_update'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Categoria $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function setExibir($exibir)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setExibir', [$exibir]);

        return parent::setExibir($exibir);
    }

    /**
     * {@inheritDoc}
     */
    public function getExibir()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getExibir', []);

        return parent::getExibir();
    }

    /**
     * {@inheritDoc}
     */
    public function getIco()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIco', []);

        return parent::getIco();
    }

    /**
     * {@inheritDoc}
     */
    public function getDescr()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescr', []);

        return parent::getDescr();
    }

    /**
     * {@inheritDoc}
     */
    public function setIco($ico)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIco', [$ico]);

        return parent::setIco($ico);
    }

    /**
     * {@inheritDoc}
     */
    public function setDescr($descr)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescr', [$descr]);

        return parent::setDescr($descr);
    }

    /**
     * {@inheritDoc}
     */
    public function getNome()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNome', []);

        return parent::getNome();
    }

    /**
     * {@inheritDoc}
     */
    public function setNome($nome)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNome', [$nome]);

        return parent::setNome($nome);
    }

    /**
     * {@inheritDoc}
     */
    public function getLink()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLink', []);

        return parent::getLink();
    }

    /**
     * {@inheritDoc}
     */
    public function setLink($link)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLink', [$link]);

        return parent::setLink($link);
    }

    /**
     * {@inheritDoc}
     */
    public function getOrderexibir()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOrderexibir', []);

        return parent::getOrderexibir();
    }

    /**
     * {@inheritDoc}
     */
    public function setOrderexibir($orderexibir)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOrderexibir', [$orderexibir]);

        return parent::setOrderexibir($orderexibir);
    }

    /**
     * {@inheritDoc}
     */
    public function toArray()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'toArray', []);

        return parent::toArray();
    }

    /**
     * {@inheritDoc}
     */
    public function getArrayCopy()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getArrayCopy', []);

        return parent::getArrayCopy();
    }

    /**
     * {@inheritDoc}
     */
    public function exchangeArray()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'exchangeArray', []);

        return parent::exchangeArray();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getDateCreate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDateCreate', []);

        return parent::getDateCreate();
    }

    /**
     * {@inheritDoc}
     */
    public function setDateCreate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDateCreate', []);

        return parent::setDateCreate();
    }

    /**
     * {@inheritDoc}
     */
    public function getDateUpdate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDateUpdate', []);

        return parent::getDateUpdate();
    }

    /**
     * {@inheritDoc}
     */
    public function setDateUpdate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDateUpdate', []);

        return parent::setDateUpdate();
    }

    /**
     * {@inheritDoc}
     */
    public function genereteUrl($str, $replace = array (
), $delimiter = '-')
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'genereteUrl', [$str, $replace, $delimiter]);

        return parent::genereteUrl($str, $replace, $delimiter);
    }

}
